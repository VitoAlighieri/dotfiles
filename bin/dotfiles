#!/bin/bash

# color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

DOTFILES_LOG="$HOME/.dotfiles.log"

set -e

# Paths
CONFIG_DIR="$HOME/.config/dotfiles"
DOTFILES_DIR="$HOME/.dotfiles"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles_run"

# Header for each function/procedure of dotfiles
function _task {

    # Arranges tasks priority
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    fi

    # Continues with tasks completion
    TASK=$1
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _checkExec execute commands with error checking
function _cmd {

    # Creates log file if does not exist
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch $DOTFILES_LOG
    fi

    # If there is an error, exit
    if eval "$1" 1>/dev/null 2>$DOTFILES_LOG; then
        return 0
    fi

    # Format errors from log file
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    while read line; do
        printf "      ${line}\n"
    done <$DOTFILES_LOG
    printf "\n"

    # Final remove of dotfile.log and exit
    rm $DOTFILES_LOG
    exit 1
}

# Clears current task
function _clear_task {
    TASK=""
}

# Completion message and task clearance
function _task_done {
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    _clear_task
}

# ArchLinux setup
function arch_setup() {

    # Checks ansible instalation and proceeds
    if ! [ -x "$(command -v ansible)" ]; then
        _task "Installing Ansible"
        _cmd "sudo pacman -Sy --noconfirm"
        _cmd "sudo pacman -S --noconfirm ansible"
    fi

    # Checks python instalation and proceeds
    if ! pacman -Q python3 >/dev/null 2>&1; then
        _task "Installing Python3"
        _cmd "sudo pacman -S --noconfirm python3"
    fi

    # Checks pip instalation and proceeds
    if ! pacman -Q python-pip >/dev/null 2>&1; then
        _task "Installing Python3 Pip"
        _cmd "sudo pacman -S --noconfirm python-pip"
    fi

    # Checks openssh instalation and proceeds
    if ! pacman -Q openssh >/dev/null 2>&1; then
        _task "Installing OpenSSH"
        _cmd "sudo pacman -S --noconfirm openssh"
    fi

    # Sets locale
    _task "Setting Locale"
    _cmd "sudo localectl set-locale LANG=en_US.UTF-8"
}

# Updates ansible galaxy
update_ansible_galaxy() {
    local os_requirements=""
    _task "Updating Ansible Galaxy"
    if [ -f "$DOTFILES_DIR/requirements/arch.yml" ]; then
        _task "${OVERWRITE}Updating Ansible Galaxy with Arch Linux configuration"
        os_requirements="$DOTFILES_DIR/requirements/arch.yml"
    fi
    _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml $os_requirements"
}

# Loading Arch Linux setup
source /etc/os-release
_task "Loading Setup for Arch Linux"
arch_setup

# Checks ssh keys and proceeds
if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then

    # Generates ssh key
    _task "Generating SSH keys"
    _cmd "mkdir -p $SSH_DIR"
    _cmd "chmod 700 $SSH_DIR"
    _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/id_rsa -N '' -C $USER@$HOSTNAME"

    # Adds ssh output into authorized_keys file
    _cmd "cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys"
fi

# Checks if dotfiles directory exists and proceeds
if ! [[ -d "$DOTFILES_DIR" ]]; then
    _task "Cloning repository"
    _cmd "git clone --quiet https://github.com/VitodAlighieri/dotfiles.git $DOTFILES_DIR"
else
    _task "Updating repository"
    _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

pushd "$DOTFILES_DIR" 2>&1 >/dev/null
update_ansible_galaxy

_task "Running playbook"
_task_done
if [[ -f $VAULT_SECRET ]]; then
    ansible-playbook --vault-password-file $VAULT_SECRET "$DOTFILES_DIR/main.yml" "$@"
else
    ansible-playbook "$DOTFILES_DIR/main.yml" "$@"
fi

popd 2>&1 >/dev/null

# Checks if it's first run and proceeds

if ! [[ -f "$IS_FIRST_RUN" ]]; then
    echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
    echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
    touch "$IS_FIRST_RUN"
fi
